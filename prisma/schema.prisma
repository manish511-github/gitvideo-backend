generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  name         String
  avatar       String
  email        String       @unique
  password     String
  repositories Repository[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Repository {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  status      String // e.g., "Updated", "In Progress", etc.
  thumbnail   String // Path to repository thumbnail
  duration    String // Total duration of videos
  commits     Int // Number of commits
  branches    Branch[] // Updated: Relationship with branches
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
  videos      Video[]  @relation("RepositoryVideos")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Video {
  id           Int         @id @default(autoincrement())
  title        String
  description  String
  tags         String[]
  fileName     String
  uploadUrl    String
  version      String
  repositoryId Int? // Optional repository association
  repository   Repository? @relation("RepositoryVideos", fields: [repositoryId], references: [id])
  commits      Commit[] // Updated: Relationship with commits
  timeline     Segment[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Change       Change[]
}

model Segment {
  id              Int   @id @default(autoincrement())
  videoId         Int
  sourceVideoId   Int
  sourceStartTime Float
  sourceEndTime   Float
  globalStartTime Float
  video           Video @relation(fields: [videoId], references: [id])
}

model Branch {
  id           Int        @id @default(autoincrement())
  name         String
  repositoryId Int
  repository   Repository @relation(fields: [repositoryId], references: [id])
  commits      Commit[] // Updated: Relationship with commits
  createdAt    DateTime   @default(now())
}

model Commit {
  id             Int      @id @default(autoincrement())
  commitId       String   @unique
  description    String //Commit message
  changes        Json // Stores operations like cut, merge, insert
  branchId       Int
  branch         Branch   @relation(fields: [branchId], references: [id])
  videoId        Int
  video          Video    @relation(fields: [videoId], references: [id])
  parentCommitId Int? // Allow null values
  parentCommit   Commit?  @relation("ParentCommit", fields: [parentCommitId], references: [id])
  childCommits   Commit[] @relation("ParentCommit") // This is the missing opposite field

  createdAt DateTime @default(now())

  Change Change[]
}

model Change {
  id            Int      @id @default(autoincrement())
  changeId      String   @unique
  videoId       Int
  operation     String
  sourceVideoId Int?
  start         Float
  end           Float
  at            Float
  createdAt     DateTime @default(now())
  video         Video    @relation(fields: [videoId], references: [id])
  Commit        Commit?  @relation(fields: [commitId], references: [id])
  commitId      Int?
}
